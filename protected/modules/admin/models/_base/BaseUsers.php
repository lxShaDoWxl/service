<?php

/**
 * This is the model base class for the table "users".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Users".
 *
 * Columns in table "users" available as properties of the model,
 * followed by relations of table "users" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $position
 * @property string $company
 * @property string $phone
 * @property string $mail
 * @property string $password
 * @property integer $privileges
 * @property string $body
 *
 * @property AnswerCommentDebat[] $answerCommentDebats
 * @property Catalog[] $catalogs
 * @property CommentAnswer[] $commentAnswers
 * @property CommentCatalog[] $commentCatalogs
 * @property CommentEvents[] $commentEvents
 * @property CommentEventsAnswer[] $commentEventsAnswers
 * @property CommentsDebat[] $commentsDebats
 * @property ConnectDebat[] $connectDebats
 * @property ConnectWebinar[] $connectWebinars
 * @property EventsMain[] $eventsMains
 * @property Favorites[] $favorites
 * @property Question[] $questions
 * @property Question[] $questions1
 * @property QuestionThemeExpert[] $questionThemeExperts
 * @property UsersImage $usersImage
 */
abstract class BaseUsers extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'users';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Users|Users', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, mail, password', 'required'),
			array('privileges', 'numerical', 'integerOnly'=>true),
			array('name, position, company, phone, mail, password', 'length', 'max'=>255),
			array('body', 'safe'),
			array('position, company, phone, privileges, body', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, position, company, phone, mail, password, privileges, body', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'answerCommentDebats' => array(self::HAS_MANY, 'AnswerCommentDebat', 'author_id'),
			'catalogs' => array(self::HAS_MANY, 'Catalog', 'author'),
			'commentAnswers' => array(self::HAS_MANY, 'CommentAnswer', 'author_id'),
			'commentCatalogs' => array(self::HAS_MANY, 'CommentCatalog', 'author_id'),
			'commentEvents' => array(self::HAS_MANY, 'CommentEvents', 'author_id'),
			'commentEventsAnswers' => array(self::HAS_MANY, 'CommentEventsAnswer', 'author_id'),
			'commentsDebats' => array(self::HAS_MANY, 'CommentsDebat', 'author_id'),
			'connectDebats' => array(self::HAS_MANY, 'ConnectDebat', 'id_user'),
			'connectWebinars' => array(self::HAS_MANY, 'ConnectWebinar', 'id_pred'),
			'eventsMains' => array(self::HAS_MANY, 'EventsMain', 'user_id'),
			'favorites' => array(self::HAS_MANY, 'Favorites', 'id_user'),
			'questions' => array(self::HAS_MANY, 'Question', 'id_user'),
			'questions1' => array(self::HAS_MANY, 'Question', 'id_expert'),
			'questionThemeExperts' => array(self::HAS_MANY, 'QuestionThemeExpert', 'id_expert'),
			'usersImage' => array(self::HAS_ONE, 'UsersImage', 'id_user'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'position' => Yii::t('app', 'Position'),
			'company' => Yii::t('app', 'Company'),
			'phone' => Yii::t('app', 'Phone'),
			'mail' => Yii::t('app', 'Mail'),
			'password' => Yii::t('app', 'Password'),
			'privileges' => Yii::t('app', 'Privileges'),
			'body' => Yii::t('app', 'Body'),
			'answerCommentDebats' => null,
			'catalogs' => null,
			'commentAnswers' => null,
			'commentCatalogs' => null,
			'commentEvents' => null,
			'commentEventsAnswers' => null,
			'commentsDebats' => null,
			'connectDebats' => null,
			'connectWebinars' => null,
			'eventsMains' => null,
			'favorites' => null,
			'questions' => null,
			'questions1' => null,
			'questionThemeExperts' => null,
			'usersImage' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('position', $this->position, true);
		$criteria->compare('company', $this->company, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('mail', $this->mail, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('privileges', $this->privileges);
		$criteria->compare('body', $this->body, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}