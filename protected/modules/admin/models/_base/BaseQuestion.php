<?php

/**
 * This is the model base class for the table "question".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Question".
 *
 * Columns in table "question" available as properties of the model,
 * followed by relations of table "question" available as properties of the model.
 *
 * @property integer $id
 * @property integer $id_user
 * @property string $user_mail
 * @property string $user_name
 * @property integer $id_expert
 * @property string $body
 * @property string $answer
 * @property integer $id_theme
 * @property string $date
 * @property integer $isVisible
 * @property string $date_answer
 *
 * @property Users $idUser
 * @property Users $idExpert
 * @property QuestionTheme $idTheme
 */
abstract class BaseQuestion extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'question';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Question|Questions', $n);
	}

	public static function representingColumn() {
		return 'body';
	}

	public function rules() {
		return array(
			array('user_mail','email','message'=>'не является правильным E-Mail адресом'),
			array('id_expert, body, id_theme, date, user_mail', 'required', 'message'=> 'Заполните поле'),
			array('id_user, id_expert, id_theme, isVisible', 'numerical', 'integerOnly'=>true),
			array('user_mail, user_name', 'length', 'max'=>255),
			array('answer, date_answer', 'safe'),
			array('id_user, user_mail, user_name, answer, isVisible, date_answer', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, id_user, user_mail, user_name, id_expert, body, answer, id_theme, date, isVisible, date_answer', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idUser' => array(self::BELONGS_TO, 'Users', 'id_user'),
			'idExpert' => array(self::BELONGS_TO, 'Users', 'id_expert'),
			'idTheme' => array(self::BELONGS_TO, 'QuestionTheme', 'id_theme'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'id_user' => null,
			'user_mail' => Yii::t('app', 'User Mail'),
			'user_name' => Yii::t('app', 'User Name'),
			'id_expert' => null,
			'body' => Yii::t('app', 'Body'),
			'answer' => Yii::t('app', 'Answer'),
			'id_theme' => null,
			'date' => Yii::t('app', 'Date'),
			'isVisible' => Yii::t('app', 'Is Visible'),
			'date_answer' => Yii::t('app', 'Date Answer'),
			'idUser' => null,
			'idExpert' => null,
			'idTheme' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('id_user', $this->id_user);
		$criteria->compare('user_mail', $this->user_mail, true);
		$criteria->compare('user_name', $this->user_name, true);
		$criteria->compare('id_expert', $this->id_expert);
		$criteria->compare('body', $this->body, true);
		$criteria->compare('answer', $this->answer, true);
		$criteria->compare('id_theme', $this->id_theme);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('isVisible', $this->isVisible);
		$criteria->compare('date_answer', $this->date_answer, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}