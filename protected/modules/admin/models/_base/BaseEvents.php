<?php

/**
 * This is the model base class for the table "events".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Events".
 *
 * Columns in table "events" available as properties of the model,
 * followed by relations of table "events" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $small_description
 * @property string $full_description
 * @property integer $isVisible
 * @property string $date
 * @property string $place
 * @property string $img
 * @property integer $view
 * @property integer $type
 *
 * @property CommentEvents[] $commentEvents
 * @property EventMedia[] $eventMedias
 * @property EventsMain[] $eventsMains
 * @property Seo $seo
 */
abstract class BaseEvents extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'events';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Events|Events', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, small_description, full_description, date, place, img', 'required'),
			array('isVisible, view, type', 'numerical', 'integerOnly'=>true),
			array('title, date, place, img', 'length', 'max'=>255),
			array('isVisible, view, type', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, small_description, full_description, isVisible, date, place, img, view, type', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'commentEvents' => array(self::HAS_MANY, 'CommentEvents', 'events_id'),
			'eventMedias' => array(self::HAS_MANY, 'EventMedia', 'id_event'),
			'eventsMains' => array(self::HAS_MANY, 'EventsMain', 'events_id'),
			'seo' => array(self::HAS_ONE, 'Seo', 'id_events'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Title'),
			'small_description' => Yii::t('app', 'Small Description'),
			'full_description' => Yii::t('app', 'Full Description'),
			'isVisible' => Yii::t('app', 'Is Visible'),
			'date' => Yii::t('app', 'Date'),
			'place' => Yii::t('app', 'Place'),
			'img' => Yii::t('app', 'Img'),
			'view' => Yii::t('app', 'View'),
			'type' => Yii::t('app', 'Type'),
			'commentEvents' => null,
			'eventMedias' => null,
			'eventsMains' => null,
			'seo' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('small_description', $this->small_description, true);
		$criteria->compare('full_description', $this->full_description, true);
		$criteria->compare('isVisible', $this->isVisible);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('place', $this->place, true);
		$criteria->compare('img', $this->img, true);
		$criteria->compare('view', $this->view);
		$criteria->compare('type', $this->type);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}